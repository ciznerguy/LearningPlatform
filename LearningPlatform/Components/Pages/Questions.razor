@page "/questions"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject LearningClassLibrary.Services.LoginSession LoginSession
@using LearningClassLibrary.Models
@using LearningClassLibrary
@using LearningPlatform.Components

@if (IsAuthorized)
{
    <h3>רשימת שאלות</h3>

    <div class="d-flex justify-content-end mb-3">
        <button class="btn btn-success" @onclick="ShowAddQuestionForm">הוספת שאלה</button>
    </div>

    <!-- כפתור חזרה -->
    <button class="btn btn-secondary mb-3" @onclick="NavigateBack">חזור למסך אדמין</button>

    @if (showAddForm)
    {
        <div class="card mb-3">
            <div class="card-header">@((editingQuestionId.HasValue ? "עריכת שאלה" : "הוספת שאלה חדשה"))</div>
            <div class="card-body">
                <form>
                    <div class="mb-3">
                        <label class="form-label">שאלה</label>
                        <input type="text" @bind="newQuestion.QuestionText" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">תשובה נכונה</label>
                        <input type="text" @bind="newQuestion.CorrectAnswer" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">רמת קושי</label>
                        <select @bind="newQuestion.Difficulty" class="form-select">
                            @foreach (DifficultyLevel level in Enum.GetValues<DifficultyLevel>())
                            {
                                <option value="@level">
                                    @($"{(int)level} - {level}")
                                </option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">נושא</label>
                        <SubjectDropdown OnTopicSelected="HandleTopicSelection" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">תשובה שגויה 1</label>
                        <input type="text" @bind="newQuestion.IncorrectAnswer1" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">תשובה שגויה 2</label>
                        <input type="text" @bind="newQuestion.IncorrectAnswer2" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">תשובה שגויה 3</label>
                        <input type="text" @bind="newQuestion.IncorrectAnswer3" class="form-control" />
                    </div>
                    <button class="btn btn-primary me-2" @onclick="SaveQuestion">שמור</button>
                    <button class="btn btn-secondary" @onclick="CancelAddQuestion">ביטול</button>
                </form>
            </div>
        </div>
    }

    @if (questions == null)
    {
        <p>טוען שאלות...</p>
    }
    else if (questions.Count == 0)
    {
        <p>לא נמצאו שאלות.</p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>מזהה</th>
                    <th>שאלה</th>
                    <th>תשובה נכונה</th>
                    <th>רמת קושי</th>
                    <th>נושא</th>
                    <th>פעולות</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var question in questions)
                {
                    <tr>
                        <td>@question.QuestionID</td>
                        <td>@question.QuestionText</td>
                        <td>@question.CorrectAnswer</td>
                        <td>@question.Difficulty</td>
                        <td>@question.Topic</td>
                        <td>
                            <button class="btn btn-primary" @onclick="() => EditQuestion(question.QuestionID)">ערוך</button>
                            <button class="btn btn-danger" @onclick="() => ShowDeleteConfirmation(question.QuestionID)">מחק</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}
else
{
    NavigationManager.NavigateTo("/access-denied");
}

@code {
    private List<Question> questions = new();
    private bool showAddForm = false;
    private bool showConfirmationPopup = false;
    private int? editingQuestionId = null;
    private int? questionIdToDelete = null;
    private Question newQuestion = new();
    private bool IsAuthorized = false;

    protected override async Task OnInitializedAsync()
    {
        // בדיקת הרשאה
        IsAuthorized = LoginSession.Role == "Admin";

        if (!IsAuthorized)
        {
            NavigationManager.NavigateTo("/access-denied");
            return;
        }

        await LoadQuestions();
    }

    private async Task LoadQuestions()
    {
        questions = await Http.GetFromJsonAsync<List<Question>>("api/questions");
    }

    private void ShowAddQuestionForm()
    {
        showAddForm = true;
    }

    private void CancelAddQuestion()
    {
        showAddForm = false;
        editingQuestionId = null;
        newQuestion = new Question();
    }

    private async Task SaveQuestion()
    {
        if (editingQuestionId.HasValue)
        {
            var response = await Http.PutAsJsonAsync($"api/questions/{editingQuestionId.Value}", newQuestion);
            if (response.IsSuccessStatusCode)
            {
                var questionIndex = questions.FindIndex(q => q.QuestionID == editingQuestionId.Value);
                if (questionIndex >= 0)
                {
                    questions[questionIndex] = newQuestion;
                }
            }
        }
        else
        {
            var response = await Http.PostAsJsonAsync("api/questions", newQuestion);
            if (response.IsSuccessStatusCode)
            {
                questions.Add(newQuestion);
            }
        }

        await LoadQuestions();
        CancelAddQuestion();
    }

    private void HandleTopicSelection(int topicId)
    {
        newQuestion.Topic = topicId.ToString();
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("http://localhost:5265/admin-dash", forceLoad: true);
    }

    private void ShowDeleteConfirmation(int id)
    {
        questionIdToDelete = id;
        showConfirmationPopup = true;
    }

    private async Task DeleteConfirmed()
    {
        if (questionIdToDelete.HasValue)
        {
            var response = await Http.DeleteAsync($"api/questions/{questionIdToDelete.Value}");
            if (response.IsSuccessStatusCode)
            {
                questions.RemoveAll(q => q.QuestionID == questionIdToDelete.Value);
            }
            questionIdToDelete = null;
            showConfirmationPopup = false;
        }
    }

    private void CancelDelete()
    {
        showConfirmationPopup = false;
        questionIdToDelete = null;
    }

    private void EditQuestion(int id)
    {
        var questionToEdit = questions.FirstOrDefault(q => q.QuestionID == id);
        if (questionToEdit != null)
        {
            newQuestion = new Question
                {
                    QuestionID = questionToEdit.QuestionID,
                    QuestionText = questionToEdit.QuestionText,
                    CorrectAnswer = questionToEdit.CorrectAnswer,
                    Difficulty = questionToEdit.Difficulty,
                    Topic = questionToEdit.Topic,
                    IncorrectAnswer1 = questionToEdit.IncorrectAnswer1,
                    IncorrectAnswer2 = questionToEdit.IncorrectAnswer2,
                    IncorrectAnswer3 = questionToEdit.IncorrectAnswer3
                };
            editingQuestionId = id;
            showAddForm = true;
            StateHasChanged();
        }
    }
}
